//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.AccountingServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountingResult", Namespace="http://schemas.datacontract.org/2004/07/Accounting")]
    [System.SerializableAttribute()]
    public partial class AccountingResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountingServiceReference.IAccountingService")]
    public interface IAccountingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/Hello", ReplyAction="http://tempuri.org/IAccountingService/HelloResponse")]
        string Hello();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/Hello", ReplyAction="http://tempuri.org/IAccountingService/HelloResponse")]
        System.Threading.Tasks.Task<string> HelloAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/GetStandardDeviation", ReplyAction="http://tempuri.org/IAccountingService/GetStandardDeviationResponse")]
        Client.AccountingServiceReference.AccountingResult GetStandardDeviation(double[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/GetStandardDeviation", ReplyAction="http://tempuri.org/IAccountingService/GetStandardDeviationResponse")]
        System.Threading.Tasks.Task<Client.AccountingServiceReference.AccountingResult> GetStandardDeviationAsync(double[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/GetMaximum", ReplyAction="http://tempuri.org/IAccountingService/GetMaximumResponse")]
        Client.AccountingServiceReference.AccountingResult GetMaximum(double[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/GetMaximum", ReplyAction="http://tempuri.org/IAccountingService/GetMaximumResponse")]
        System.Threading.Tasks.Task<Client.AccountingServiceReference.AccountingResult> GetMaximumAsync(double[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/GetMinimum", ReplyAction="http://tempuri.org/IAccountingService/GetMinimumResponse")]
        Client.AccountingServiceReference.AccountingResult GetMinimum(double[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/GetMinimum", ReplyAction="http://tempuri.org/IAccountingService/GetMinimumResponse")]
        System.Threading.Tasks.Task<Client.AccountingServiceReference.AccountingResult> GetMinimumAsync(double[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/GetAverage", ReplyAction="http://tempuri.org/IAccountingService/GetAverageResponse")]
        Client.AccountingServiceReference.AccountingResult GetAverage(double[] numbers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountingService/GetAverage", ReplyAction="http://tempuri.org/IAccountingService/GetAverageResponse")]
        System.Threading.Tasks.Task<Client.AccountingServiceReference.AccountingResult> GetAverageAsync(double[] numbers);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountingServiceChannel : Client.AccountingServiceReference.IAccountingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountingServiceClient : System.ServiceModel.ClientBase<Client.AccountingServiceReference.IAccountingService>, Client.AccountingServiceReference.IAccountingService {
        
        public AccountingServiceClient() {
        }
        
        public AccountingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Hello() {
            return base.Channel.Hello();
        }
        
        public System.Threading.Tasks.Task<string> HelloAsync() {
            return base.Channel.HelloAsync();
        }
        
        public Client.AccountingServiceReference.AccountingResult GetStandardDeviation(double[] numbers) {
            return base.Channel.GetStandardDeviation(numbers);
        }
        
        public System.Threading.Tasks.Task<Client.AccountingServiceReference.AccountingResult> GetStandardDeviationAsync(double[] numbers) {
            return base.Channel.GetStandardDeviationAsync(numbers);
        }
        
        public Client.AccountingServiceReference.AccountingResult GetMaximum(double[] numbers) {
            return base.Channel.GetMaximum(numbers);
        }
        
        public System.Threading.Tasks.Task<Client.AccountingServiceReference.AccountingResult> GetMaximumAsync(double[] numbers) {
            return base.Channel.GetMaximumAsync(numbers);
        }
        
        public Client.AccountingServiceReference.AccountingResult GetMinimum(double[] numbers) {
            return base.Channel.GetMinimum(numbers);
        }
        
        public System.Threading.Tasks.Task<Client.AccountingServiceReference.AccountingResult> GetMinimumAsync(double[] numbers) {
            return base.Channel.GetMinimumAsync(numbers);
        }
        
        public Client.AccountingServiceReference.AccountingResult GetAverage(double[] numbers) {
            return base.Channel.GetAverage(numbers);
        }
        
        public System.Threading.Tasks.Task<Client.AccountingServiceReference.AccountingResult> GetAverageAsync(double[] numbers) {
            return base.Channel.GetAverageAsync(numbers);
        }
    }
}
